%{
#include "hw3_output.hpp"
#include "Semantic_types.hpp"
#include "ParserFunctions.hpp"
#include <string>

using namespace std;

extern int yylineno;

int yylex();
void yyerror(const char*);


%}

%union {
    char charType;
    char* strType;
    exp_t exp;
    type_t type;
    enumType_t enumType;
    call_t call;
    expList_t expList;
    dummy_t dummy;
    formals_t formals;
    formalList_t formalsList;
    formalDecl_t formalDecl;
    retType_t retType;
    enumeratorList_t enumeratorList;
	enumerator_t enumerator;
    funcIdDecl_t funcIdDecl;
    enumIdDecl_t enumIdDecl;
    markerM_t markerM;
    statement_t statement;
    ifHeader_t ifHeader;
    closeScopeAndOpen_t closeScopeAndOpen;
    whileHeader_t whileHeader;
};

%nonassoc <dummy> IFWITHOUTELSE
%nonassoc <dummy> IFWITHELSE

%token <dummy> B
%token <strType> ID
%token <dummy> LPAREN
%nonassoc <dummy> RPAREN
%token <dummy> LBRACE
%token <dummy> RBRACE
%token <dummy> ENUM
%token <dummy> SC
%token <dummy> VOID
%token <dummy> COMMA
%token <dummy> RETURN
%token <dummy> BREAK
%token <dummy> IF
%token <dummy> CONTINUE
%nonassoc <dummy> ELSE
%token <dummy> WHILE
%token <dummy> INT
%token <dummy> BYTE
%token <dummy> BOOL
%token <strType> NUM
%token <strType> STRING
%token <dummy> TRUE
%token <dummy> FALSE
%right <dummy> ASSIGN
%left <dummy> OR
%left <dummy> AND
%left <strType> EQUALITY
%nonassoc <strType> RELATIONAL
%left <charType> ADDITIVE
%left <charType> MUL
%right <dummy> CAST
%right <dummy> NOT
%left <dummy> PARENS

%type <dummy> Program
%type <dummy> Funcs
%type <dummy> FuncDecl
%type <dummy> Enums
%type <dummy> EnumDecl
%type <retType> RetType
%type <formals> Formals
%type <formalsList> FormalsList
%type <formalDecl> FormalDecl
%type <enumeratorList> EnumeratorList
%type <enumerator> Enumerator
%type <statement> Statements
%type <statement> Statement
%type <call> Call
%type <expList> ExpList
%type <type> Type
%type <enumType> EnumType
%type <exp> Exp
%type <dummy> FuncDeclHeader
%type <dummy> OpenScope
%type <closeScopeAndOpen> CloseScopeAndOpen
%type <ifHeader> IfHeader
%type <whileHeader> WhileHeader
%type <funcIdDecl> FuncIdDecl
%type <enumIdDecl> EnumIdDecl
%type <markerM> M

%%

Program:            Enums Funcs {};
Funcs:              {}|
                    FuncDecl Funcs ;
FuncDecl:           FuncDeclHeader Statements RBRACE {
						string endOfFuncLabel = CloseFuncDefinition();
						if ($2.isNextList){
							BPatchList(endOfFuncLabel, $2.nextList);
						}
						if ($2.isBreakList){
							BPatchList(endOfFuncLabel, $2.breakList);
						}
                        
                        CloseCurrentScope();
                    };
FuncIdDecl:         RetType ID {
						string id($2);
                        AddFunctionSymbolIfNotExists(id, *($1.type));
                        UpdateCurrFunctionRetType(*($1.type));
                        $$.funcId = new string($2);
						$$.retType = $1.type;
                    };
FuncDeclHeader:     FuncIdDecl LPAREN Formals RPAREN LBRACE {
                        UpdateFunctionSymbolArgs(*($3.args), *($1.funcId));
                        OpenNewScope();
                        AddFuncArgsToSymbolTable(*($3.args));
                        DefineFunc(*($1.funcId), *($1.retType), $3.args);
                        AllocateLocalVars();
						delete $3.args;
                        delete $1.funcId;
                    };
OpenScope:          {
                        OpenNewScope();
                    };
CloseScopeAndOpen:  {
                        $$.nextList = new vector<pair<int, BranchLabelIndex>>(CreatePatchList());
                        CloseCurrentScope();
						OpenNewScope();
						$$.labelToJump = new string(GenLabel());
                    };
Enums:              {}|
                    EnumDecl Enums ;
EnumIdDecl:         ENUM ID LBRACE {
						string id($2);
                        AddEnumSymbolIfNotExists(id);
                        $$.enumId = new string($2);
                    };
EnumDecl:           EnumIdDecl EnumeratorList RBRACE SC {
                        UpdateEnumSymbolValues(*($2.values), *($1.enumId));
                        delete $2.values;
						delete $1.enumId;
                    };
RetType:            Type {$$.type = $1.type;}|
                    VOID {$$.type = new string("VOID");};
Formals:            {
                        $$.args = new vector<tuple<string, string, bool>>();
                    }|
                    FormalsList {
                        $$.args = $1.args;
                    };
FormalsList:        FormalDecl {
                        $$.args = new vector<tuple<string,string, bool>>();
                        tuple<string,string, bool> argToAdd(*($1.type),
                                                            *($1.argName),
                                                            $1.isEnumType);
                        $$.args->push_back(argToAdd);
                        delete $1.type;
                        delete $1.argName;
                    }|
                    FormalDecl COMMA FormalsList {
                        $$.args = $3.args;
                        CheckNoDuplicatesFormalList(*($3.args), *($1.argName));
                        tuple<string,string, bool> argToAdd(*($1.type),
                                                            *($1.argName),
                                                            $1.isEnumType);
                        $$.args->insert($$.args->begin(), argToAdd);
                        delete $1.type;
                        delete $1.argName;
                    };
FormalDecl:         Type ID {
						string id($2);
                        CheckIfIdIsShadowing(id);
                        $$.type = $1.type;
                        $$.argName = new string($2);
                        $$.isEnumType = false;
                    }|
                    EnumType ID {
						string id($2);
                        CheckIfIdIsShadowing(id);
                        $$.type = new string(*($1.typeName));
                        $$.argName = new string($2);
                        $$.isEnumType = true;
                        delete $1.typeName;
                    };
EnumeratorList:     Enumerator {
                        $$.values = new vector<string>();
                        $$.values->push_back(*($1.value));
                        delete $1.value;
                    }|
                    EnumeratorList COMMA Enumerator {
                        $$.values = $1.values;
                        CheckNoDuplicatesEnumList(*($1.values), *($3.value));
                        $$.values->push_back(*($3.value));
                        delete $3.value;
                    };
Enumerator:         ID {
						string id($1);
                        CheckIfIdIsShadowing(id);
                        $$.value = new string($1);
                    };
Statements:         Statement {
                        if ($1.isNextList){
                            $$.nextList = $1.nextList;
                        }
                        $$.isNextList = $1.isNextList;
                        if ($1.isBreakList){
                            $$.breakList = $1.breakList;
                        }
                        $$.isBreakList = $1.isBreakList;
                    } |
                    Statements M Statement {
                        if($1.isNextList){
                            BPatchList(*($2.labelToJump), $1.nextList);
                        }
                        if($3.isNextList){
                            $$.nextList = $3.nextList;
                        }
                        $$.isNextList = $3.isNextList;

                        vector<pair<int, BranchLabelIndex>> mergedList;
                        if($1.isBreakList){
                            mergedList = MergePatchLists(*($1.breakList), mergedList);
                        }
                        if($3.isBreakList){
                            mergedList = MergePatchLists(*($3.breakList), mergedList);
                        }
                        if($3.isBreakList || $1.isBreakList){
                            $$.breakList = new vector<pair<int, BranchLabelIndex>>(mergedList);
                        }
                        $$.isBreakList = ($3.isBreakList || $1.isBreakList);
                    };
Statement:          LBRACE OpenScope Statements RBRACE {
                        CloseCurrentScope();
                        if($3.isNextList){
                            $$.nextList = $3.nextList;
                        }
                        $$.isNextList = $3.isNextList;
                        if($3.isBreakList){
                            $$.breakList = $3.breakList;
                        }
                        $$.isBreakList = $3.isBreakList;
                    }|
                    Type ID SC {
						string id($2);
                        AddVariableSymbolIfNotExists(id, *($1.type), false);
                        CreateNewVarDefaultValue();
                        delete $1.type;
                        $$.isNextList = false;
                        $$.isBreakList = false;
                    }|
                    EnumType ID SC {
						string id($2);
                        AddVariableSymbolIfNotExists(id, *($1.typeName), true);
                        CreateNewVarDefaultValue();
                        delete $1.typeName;
                        $$.isNextList = false;
                        $$.isBreakList = false;
                    }|
                    EnumDecl {
                        $$.isNextList = false;
                        $$.isBreakList = false;
                    }|
                    Type ID ASSIGN Exp SC {
						string id($2);
                        AddVariableSymbolIfNotExists(id, *($1.type), false);
                        CheckIfAssignmentAllowed(*($1.type), *($4.type));
						string expVarName;
						if (*($4.type) == "BOOL"){
							expVarName = SaveBoolExpInReg($4.trueList, $4.falseList);
						}
						else {
							expVarName = *($4.varName);
						}
                        CreateNewVarGivenValue(*($1.type), expVarName);
                        delete $1.type;
                        delete $4.type;
                        $$.isNextList = false;
                        $$.isBreakList = false;
                    }|
                    EnumType ID ASSIGN Exp SC {
						string id($2);
                        CheckIfAssignmentAllowedEnum(*($1.typeName), *($4.type), id);
                        AddVariableSymbolIfNotExists(id, *($1.typeName), false);
                        CreateNewVarGivenValue(*($1.typeName), *($4.varName));
                        delete $1.typeName;
                        delete $4.type;
                        $$.isNextList = false;
                        $$.isBreakList = false;
                    }|
                    ID ASSIGN Exp SC {
						string id($1);
                        HandleAssignmentForExistingVar(id, *($3.type));
						string expVarName;
						if (*($3.type) == "BOOL"){
							expVarName = SaveBoolExpInReg($3.trueList, $3.falseList);
						}
						else {
							expVarName = *($3.varName);
						}
                        UpdateVar(*($3.type), expVarName, $1);
                        delete $3.type;
                        $$.isNextList = false;
                        $$.isBreakList = false;
                    }|
                    Call SC {
                        delete $1.type;
                        $$.isNextList = false;
                        $$.isBreakList = false;
                    }|
                    RETURN SC {
						string void_str("VOID");
                        CheckReturnValid(void_str);
                        $$.isNextList = false;
                        $$.isBreakList = false;
                        emitReturn(void_str, "");
                    }|
                    RETURN Exp SC {
                        CheckReturnValid(*($2.type));
						CheckFuncRetValNotVoid();
                        delete $2.type;
                        $$.isNextList = false;
                        $$.isBreakList = false;
                        emitReturn(*($2.type), *($2.varName));
                    }|
                    IfHeader Statement %prec IFWITHOUTELSE{
                        CloseCurrentScope();
                        $$.isNextList = $2.isNextList;
                        if($2.isNextList){
                            $$.nextList = $2.nextList;
                        }
                        $$.isBreakList = false;
                    }|
                    IfHeader Statement ELSE CloseScopeAndOpen Statement %prec IFWITHELSE{
                        CloseCurrentScope();
                        BPatchList(*($4.labelToJump), $1.falseList);
                        $$.isNextList = true;
                        vector<pair<int, BranchLabelIndex>> mergedList = *($4.nextList);
                        if($2.isNextList){
                            mergedList = MergePatchLists(*($2.nextList), mergedList);
                        }
                        if($5.isNextList){
                            mergedList = MergePatchLists(*($5.nextList), mergedList);
                        }
                        $$.nextList = new vector<pair<int, BranchLabelIndex>>(mergedList);
                        $$.isBreakList = false;
                    }|
                    WhileHeader Statement {
                        LeaveLoop();
                        CloseCurrentScope();
                        ExitLoopPopExpLabel();
                        vector<pair<int, BranchLabelIndex>>* backToExp = new vector<pair<int, BranchLabelIndex>>(CreatePatchList());
                        BPatchList(*($1.whileExpLabel), backToExp);
                        vector<pair<int, BranchLabelIndex>> mergedList = *($1.falseList);
                        if($2.isNextList){
                            mergedList = MergePatchLists(*($2.nextList), mergedList);
                        }
                        if($2.isBreakList){
                            mergedList = MergePatchLists(*($2.breakList), mergedList);
                        }
                        $$.nextList = new vector<pair<int, BranchLabelIndex>>(mergedList);
                        $$.isNextList = true;
                        $$.isBreakList = false;
                    }|
                    BREAK SC {
                        CheckIfBreakInLoop();
                        $$.breakList = new vector<pair<int, BranchLabelIndex>>(CreatePatchList());
                        $$.isBreakList = true;
                        $$.isNextList = false;
                    }|
                    CONTINUE SC {
                        CheckIfContinueInLoop();
                        vector<pair<int, BranchLabelIndex>>* continueBr = new vector<pair<int, BranchLabelIndex>>(CreatePatchList());
                        string whileExpLabel = GetWhileExpLabel();
                        BPatchList(whileExpLabel, continueBr);
                    };
IfHeader:           IF LPAREN Exp RPAREN {
                        vector<string> expected(1, "BOOL");
                        CheckTypesMatch(expected, *($3.type));
                        OpenNewScope();
						delete $3.type;
						string labelIfTrue = GenLabel();
                        BPatchList(labelIfTrue, $3.trueList);
                        $$.falseList = $3.falseList;
                    };
WhileHeader:        WHILE M LPAREN Exp RPAREN {
                        vector<string> expected(1, "BOOL");
                        CheckTypesMatch(expected, *($4.type));
                        EnterLoop();
                        OpenNewScope();
						delete $4.type;
						string labelIfTrue = GenLabel();
                        BPatchList(labelIfTrue, $4.trueList);
                        $$.falseList = $4.falseList;
                        $$.whileExpLabel = $2.labelToJump;
                        EnterLoopPushExpLabel(*($2.labelToJump));
                    };
Call:               ID LPAREN ExpList RPAREN {
						string id($1);
                        $$.type = new string(CheckFunction(id, *($3.types)));
                        string returnedValue = "";
                        if (id == "print"){
                            CallPrintFunction($3.varNames->front());
                        }
                        else if (id == "printi"){
                            CallPrintiFunction($3.varNames->front());
                        }
                        else {
                            string allocatedArgs = AllocateFuncArgs(($3.varNames)->size(), *($3.varNames), *($3.types));
                            returnedValue = CallFunction(allocatedArgs, id, ($3.varNames)->size());
                        }
						$$.varName = new string(returnedValue);
						delete $3.types;

                    }|
                    ID LPAREN RPAREN {
						string id($1);
                        $$.type = new string(CheckFunction(id, vector<string>()));
						string returnedValue = CallFunctionNoArgs(id);
						$$.varName = new string(returnedValue);
                    };
ExpList:            Exp {
                        $$.types = new vector<string>();
                        $$.types->push_back(*($1.type));
                        $$.varNames = new vector<string>();
						string expVarName;
						if (*($1.type) == "BOOL"){
							expVarName = SaveBoolExpInReg($1.trueList, $1.falseList);
						}
						else {
							expVarName = *($1.varName);
						}
                        $$.varNames->push_back(expVarName);
						
						delete $1.type;
                    }|
                    Exp COMMA ExpList {
                        $3.types->insert($3.types->begin(), *($1.type));
                        $$.types = $3.types;
                        string expVarName;
						if (*($1.type) == "BOOL"){
							expVarName = SaveBoolExpInReg($1.trueList, $1.falseList);
						}
						else {
							expVarName = *($1.varName);
						}
						$$.varNames = $3.varNames;
                        $3.varNames->insert($3.varNames->begin(), expVarName);
						delete $1.type;
                    };
Type:               INT {$$.type = new string("INT");}|
                    BYTE {$$.type = new string("BYTE");}|
                    BOOL {$$.type = new string("BOOL");};
EnumType:           ENUM ID {
                        string enumName($2);
                        CheckIfEnumTypeIsDefined(enumName);
                        string fullType = string("enum ") + string($2);
                        $$.typeName = new string(fullType);
                    };
M:                  {
                        $$.labelToJump = new string(GenLabel());
                    };
Exp:                LPAREN Exp RPAREN %prec PARENS {
                        $$.type = $2.type;
                        if (*($2.type) == "BOOL"){
                            $$.trueList = $2.trueList;
                            $$.falseList = $2.falseList;
                        }
                        $$.varName = $2.varName;
                    }|
                    Exp ADDITIVE Exp {
                        vector<string> expected;
                        expected.push_back("INT");
                        expected.push_back("BYTE");
                        CheckTypesMatch(expected, *($1.type));
                        CheckTypesMatch(expected, *($3.type));
                        $$.type = new string(DetermineBinopReturnType(*($1.type), *($3.type)));
                        string varName1 = *($1.varName);
                        string varName2 = *($3.varName);
                        if(*($$.type) == "INT"){
                            varName1 = ConvertIfByte(*($1.type), *($1.varName));
                            varName2 = ConvertIfByte(*($3.type), *($3.varName));
                        }
                        $$.varName = new string(DoArithmeticAction(varName1, varName2, $2, *($$.type)));
                        delete $1.type;
                        delete $3.type;
                    }|
                    Exp MUL Exp {
                        vector<string> expected;
                        expected.push_back("INT");
                        expected.push_back("BYTE");
                        CheckTypesMatch(expected, *($1.type));
                        CheckTypesMatch(expected, *($3.type));
                        $$.type = new string(DetermineBinopReturnType(*($1.type), *($3.type)));
                        string varName1 = *($1.varName);
                        string varName2 = *($3.varName);
                        if(*($$.type) == "INT"){
                            varName1 = ConvertIfByte(*($1.type), *($1.varName));
                            varName2 = ConvertIfByte(*($3.type), *($3.varName));
                        }
                        $$.varName = new string(DoArithmeticAction(varName1, varName2, $2, *($$.type)));
                        delete $1.type;
                        delete $3.type;
                    }|
                    ID {
						string id($1);
                        $$.type = new string(GetExpressionTypeById(id));
                        $$.varName = new string(HandleExpId(id));
						if (*($$.type) == "BOOL"){
							vector<pair<int, BranchLabelIndex>> *trueList, *falseList;
							HandleBoolVarAsExp(*($$.varName), trueList, falseList);
							$$.falseList = falseList;
							$$.trueList = trueList;
						}
                    }|
                    Call {
                        $$.type = $1.type;
						$$.varName = $1.varName;
                    }|
                    NUM {
                        string val($1);
                        $$.type = new string("INT");
                        $$.varName = new string(CreateInitialIntegerVar(val));
                    }|
                    NUM B {
                        string val($1);
                        CheckNumValidity(stoi(val));
                        $$.type = new string("BYTE");
                        $$.varName = new string(CreateInitialByteVar(val));

                    }|
                    STRING {
                        $$.type = new string("STRING");
                        $$.varName = new string(WriteStringToBuffer(string($1)));

                    }|
                    TRUE {
                        $$.type = new string("BOOL");
                        $$.trueList = new vector<pair<int, BranchLabelIndex>>(CreatePatchList());
                        $$.falseList = new vector<pair<int, BranchLabelIndex>>();
                    }|
                    FALSE {
                        $$.type = new string("BOOL");
                        $$.falseList = new vector<pair<int, BranchLabelIndex>>(CreatePatchList());
                        $$.trueList = new vector<pair<int, BranchLabelIndex>>();
                    }|
                    NOT Exp {
                        vector<string> expected(1, "BOOL");
                        CheckTypesMatch(expected, *($2.type));
                        $$.type = $2.type;
                        $$.trueList = $2.falseList;
                        $$.falseList = $2.trueList;
                    }|
                    Exp AND M Exp {
                        vector<string> expected(1, "BOOL");
                        CheckTypesMatch(expected, *($1.type));
                        CheckTypesMatch(expected, *($4.type));
                        vector<pair<int, BranchLabelIndex>> *trueList, *falseList;
                        HandleAnd(trueList, falseList, $1.trueList, $1.falseList, $4.trueList, $4.falseList, *($3.labelToJump));
                        $$.trueList = trueList;
                        $$.falseList = falseList;
                        $$.type = $1.type;
						delete $4.type;
                    }|
                    Exp OR M Exp {
                        vector<string> expected(1, "BOOL");
                        CheckTypesMatch(expected, *($1.type));
                        CheckTypesMatch(expected, *($4.type));
                        vector<pair<int, BranchLabelIndex>> *trueList, *falseList;
                        HandleOr(trueList, falseList, $1.trueList, $1.falseList, $4.trueList, $4.falseList, *($3.labelToJump));
                        $$.trueList = trueList;
                        $$.falseList = falseList;
                        $$.type = $1.type;
						delete $4.type;
                    }|
                    Exp RELATIONAL Exp {
                        vector<string> expected;
                        expected.push_back("INT");
                        expected.push_back("BYTE");
                        CheckTypesMatch(expected, *($1.type));
                        CheckTypesMatch(expected, *($3.type));
                        $$.type = new string("BOOL");
                        string varName1 = *($1.varName);
                        string varName2 = *($3.varName);
                        string commonType = DetermineBinopReturnType(*($1.type), *($3.type));
                        if(commonType == "INT"){
                            varName1 = ConvertIfByte(*($1.type), *($1.varName));
                            varName2 = ConvertIfByte(*($3.type), *($3.varName));
                        }
                        vector<pair<int, BranchLabelIndex>> *trueList, *falseList;
                        CompareAction(varName1, varName2, string($2), commonType, trueList, falseList);
                        $$.trueList = trueList;
                        $$.falseList = falseList;
                        delete $1.type;
                        delete $3.type;
                    }|
                    Exp EQUALITY Exp {
                        vector<string> expected;
                        expected.push_back("INT");
                        expected.push_back("BYTE");
                        CheckTypesMatch(expected, *($1.type));
                        CheckTypesMatch(expected, *($3.type));
                        $$.type = new string("BOOL");
                        string varName1 = *($1.varName);
                        string varName2 = *($3.varName);
                        string commonType = DetermineBinopReturnType(*($1.type), *($3.type));
                        if(commonType == "INT"){
                            varName1 = ConvertIfByte(*($1.type), *($1.varName));
                            varName2 = ConvertIfByte(*($3.type), *($3.varName));
                        }
                        vector<pair<int, BranchLabelIndex>> *trueList, *falseList;
                        CompareAction(varName1, varName2, string($2), commonType, trueList, falseList);
                        $$.trueList = trueList;
                        $$.falseList = falseList;
                        delete $1.type;
                        delete $3.type;
                    }|
                    LPAREN Type RPAREN Exp %prec CAST {
                        isExplicitCastAllowed(*($2.type), *($4.type));
						$$.type = $2.type;
						delete $4.type;
						$$.varName = $4.varName;
                    };

%%

void yyerror(const char*){
    errorSyn(yylineno);
    exit(0);
}

int main(){
    DeclarePrintfAndExit();
    DeclarePrinti();
    DeclarePrint();
    yyparse();
	CheckMainExists();
	CallMainFunc();
	//closing global scope
    CloseCurrentScope();
	PrintLLVMCode();
	return 0;
}